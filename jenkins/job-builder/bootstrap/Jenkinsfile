pipeline {

  agent any

  options {
    ansiColor('xterm')
    timestamps()
    retry(1)
  }

  parameters {
    string(name: 'DEST_HOST', defaultValue: '172.18.0.1', description: 'The host where JJB will run to generate jobs. By default it is host machine where Jenkins installed in Docker.')
    string(name: 'DEST_PORT', defaultValue: '22', description: 'The port of the host where JJB will run to generate jobs.')
    string(name: 'DEST_USER', defaultValue: 'ci', description: 'The user of the host where JJB will run to generate jobs.')
    string(name: 'DEST_CREDENTIALS_ID', defaultValue: 'SSH_CI__JENKINS_JET_DEV', description: 'SSH credentials ID of the host where JJB will run to generate jobs.')
    string(name: 'JJB_USER_CREDENTIALS_ID', defaultValue: 'JJB_USER', description: '')
    string(name: 'JJB_PASSWORD_CREDENTIALS_ID', defaultValue: 'JJB_PASSWORD', description: '')
    string(name: 'JJB_JENKINS_URL', defaultValue: 'http://localhost:8080', description: '')
    string(name: 'DEVOPS_REPO_URL', defaultValue: 'git@github.com:jet-dev-team/br-jenkins.git', description: 'Git repo for project CI.')
    string(name: 'DEVOPS_REPO_VERSION', defaultValue: 'main', description: '')
    string(name: 'DEVOPS_REPO_DEPLOY_KEY_CREDENTIALS_ID', defaultValue: 'DEPLOY_KEY__BR_JENKINS', description: '')
  }

  stages {
    stage('Check for empty parameters') {
      when {
        anyOf {
          expression { params.DEST_HOST == '' }
          expression { params.DEST_PORT == '' }
          expression { params.DEST_USER == '' }
          expression { params.DEST_CREDENTIALS_ID == '' }
          expression { params.JJB_USER_CREDENTIALS_ID == '' }
          expression { params.JJB_PASSWORD_CREDENTIALS_ID == '' }
          expression { params.JJB_JENKINS_URL == '' }
          expression { params.DEVOPS_REPO_URL == '' }
          expression { params.DEVOPS_REPO_VERSION == '' }
          expression { params.DEVOPS_REPO_DEPLOY_KEY_CREDENTIALS_ID == '' }
        }
      }
      steps {
        error("No required parameters.")
      }
    }

    stage('Job wrapper') {
      environment {
        JJB_USER = credentials("${params.JJB_USER_CREDENTIALS_ID}")
        JJB_PASSWORD = credentials("${params.JJB_PASSWORD_CREDENTIALS_ID}")
      }

      steps {
        checkout scmGit(
          userRemoteConfigs: [[
            url: params.DEVOPS_REPO_URL,
            credentialsId: params.DEVOPS_REPO_DEPLOY_KEY_CREDENTIALS_ID
          ]],
          branches: [[name: "*/${params.DEVOPS_REPO_VERSION}"]]
        )

        withFolderProperties {
          script {
            load "jenkins/job-wrapper.groovy"
          }
        }
      }
    }

  }
}
