pipeline {

  agent any

  options {
    ansiColor('xterm')
    timestamps()
    retry(1)
  }

  parameters {
    string(name: 'JJB_USER_CREDENTIALS_ID', defaultValue: 'JJB_USER', description: '')
    string(name: 'JJB_PASSWORD_CREDENTIALS_ID', defaultValue: 'JJB_PASSWORD', description: '')
    string(name: 'JJB_JENKINS_URL', defaultValue: 'http://localhost:8080', description: '')
    string(name: 'DEVOPS_REPO', defaultValue: 'git@github.com:jet-dev-team/br-jenkins.git', description: '')
    string(name: 'DEVOPS_REPO_BRANCH', defaultValue: 'main', description: '')
    string(name: 'DEVOPS_REPO_DEPLOY_KEY_ID', defaultValue: 'DEPLOY_KEY__BR_JENKINS', description: '')
  }

  stages {
    stage('Check for empty parameters') {
      when {
        anyOf {
          expression { params.JJB_USER_CREDENTIALS_ID == '' }
          expression { params.JJB_PASSWORD_CREDENTIALS_ID == '' }
          expression { params.DEVOPS_REPO_DEPLOY_KEY_ID == '' }
        }
      }
      steps {
        error("No required parameters.")
      }
    }

    stage('Bootstrap') {
      environment {
        JJB_USER = credentials("${params.JJB_USER_CREDENTIALS_ID}")
        JJB_PASSWORD = credentials("${params.JJB_PASSWORD_CREDENTIALS_ID}")
      }

      steps {
        checkout scmGit(
          branches: [[name: "*/${params.DEVOPS_REPO_BRANCH}"]],
          userRemoteConfigs: [[
            credentialsId: params.DEVOPS_REPO_DEPLOY_KEY_ID,
            url: params.DEVOPS_REPO
          ]]
        )

        ansiblePlaybook(
          extraVars: [
            jjb_jenkins_user: env.JJB_USER,
            jjb_jenkins_password: env.JJB_PASSWORD,
            jjb_jenkins_url: params.JJB_JENKINS_URL,
          ],
          inventoryContent: """
          [host]
          localhost ansible_connection=local
          """,
          playbook: 'jobs/job-builder/ansible/playbook.yml',
          disableHostKeyChecking: true,
          colorized: true,
          extras: '-v',
        )
      }
    }
  }
}
